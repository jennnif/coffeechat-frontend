{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/and___young/Desktop/kt_pj2/coffeechat-frontend/app/api/users/%5BuserId%5D/route.ts"],"sourcesContent":["/**\n * User Service 개별 사용자 프록시 API 라우트\n * GET, DELETE /api/users/[userId]\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\n\nconst USER_SERVICE_URL = process.env.USER_SERVICE_URL || 'http://localhost:8081';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { userId: string } }\n) {\n  try {\n    const { userId } = params;\n    \n    const response = await fetch(`${USER_SERVICE_URL}/users/${encodeURIComponent(userId)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      return NextResponse.json(\n        { error: `User Service Error: ${errorText}` },\n        { status: response.status }\n      );\n    }\n\n    const data = await response.json();\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error('User Service 연결 오류:', error);\n    return NextResponse.json(\n      { error: 'User Service에 연결할 수 없습니다' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { userId: string } }\n) {\n  try {\n    const { userId } = params;\n    \n    const response = await fetch(`${USER_SERVICE_URL}/users/${encodeURIComponent(userId)}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      return NextResponse.json(\n        { error: `User Service Error: ${errorText}` },\n        { status: response.status }\n      );\n    }\n\n    const data = await response.json();\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error('User Service 연결 오류:', error);\n    return NextResponse.json(\n      { error: 'User Service에 연결할 수 없습니다' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;AAED;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,gBAAgB,IAAI;AAElD,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAkC;IAE1C,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG;QAEnB,MAAM,WAAW,MAAM,MAAM,GAAG,iBAAiB,OAAO,EAAE,mBAAmB,SAAS,EAAE;YACtF,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,oBAAoB,EAAE,WAAW;YAAC,GAC5C;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OACpB,OAAoB,EACpB,EAAE,MAAM,EAAkC;IAE1C,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG;QAEnB,MAAM,WAAW,MAAM,MAAM,GAAG,iBAAiB,OAAO,EAAE,mBAAmB,SAAS,EAAE;YACtF,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,oBAAoB,EAAE,WAAW;YAAC,GAC5C;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}